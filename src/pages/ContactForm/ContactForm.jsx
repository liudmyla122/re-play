import React, { useState, useRef, useEffect, useMemo } from 'react'
import './ContactForm.css' // –ò–º–ø–æ—Ä—Ç —Å—Ç–∏–ª–µ–π

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã/–∏–∫–æ–Ω–∫–∏)
const ClipIcon = () => <span className="clip-icon">üìé</span>
const PlusIcon = () => <span className="plus">+</span>
// –ò–∫–æ–Ω–∫–∞ —ç–º–æ–¥–∑–∏
const ShieldIcon = () => <span className="recaptcha-icon">üò∫</span>

const PROJECT_OPTIONS = [
  '–†–µ–∫–ª–∞–º–Ω—ã–π —Ä–æ–ª–∏–∫',
  '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –≤–∏–¥–µ–æ',
  '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–ø',
  '–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º',
  '–ê–Ω–∏–º–∞—Ü–∏—è',
  '–î—Ä—É–≥–æ–µ',
]
const MAX_IDEA_CHARS = 5000

export default function ContactForm() {
  const [form, setForm] = useState({
    name: '',
    email: '',
    phone: '',
    company: '',
    site: '',
    idea: '',
    videoLink: '',
  })
  const [project, setProject] = useState('')
  const [projectOpen, setProjectOpen] = useState(false)
  const projectRef = useRef(null)

  // –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const [images, setImages] = useState([null, null, null]) // URL-—ã –¥–ª—è –ø—Ä–µ–≤—å—é
  const [imageFiles, setImageFiles] = useState([null, null, null]) // –û–±—ä–µ–∫—Ç—ã File
  const fileInputRefs = useRef([]) // –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫—Ä—ã—Ç—ã–µ input[type=file]

  const [captchaChecked, setCaptchaChecked] = useState(false)
  const [errors, setErrors] = useState({})
  const [submitting, setSubmitting] = useState(false)
  const [success, setSuccess] = useState('')
  const [activeStep, setActiveStep] = useState(1) // –ê–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥ –¥–ª—è —Ç–∞–π–º–ª–∞–π–Ω–∞

  // --- –≠–§–§–ï–ö–¢–´ ---

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const onDoc = (e) => {
      if (projectRef.current && !projectRef.current.contains(e.target)) {
        setProjectOpen(false)
      }
    }
    document.addEventListener('mousedown', onDoc)
    return () => document.removeEventListener('mousedown', onDoc)
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞ (–ª–æ–≥–∏–∫–∞ "–ø–æ–¥—Å–∫–∞–∑–æ–∫")
  useEffect(() => {
    let newStep = 1
    // –®–∞–≥ 2: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (form.name && form.email && (form.phone || form.company)) {
      newStep = 2
      // –®–∞–≥ 3: –í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
      if (project) {
        newStep = 3
        // –®–∞–≥ 4: –û–ø–∏—Å–∞–Ω–∞ –∏–¥–µ—è (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤)
        if (form.idea.length > 50) {
          newStep = 4
        }
      }
    }
    setActiveStep(newStep)
  }, [form, project])

  // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

  const handleChange = (e) => {
    const { name, value } = e.target
    setForm((s) => ({ ...s, [name]: value }))
    // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–≤–æ–¥–∏—Ç—å
    setErrors((prev) => ({ ...prev, [name]: '' }))
  }

  const handleProjectSelect = (opt) => {
    setProject(opt)
    setProjectOpen(false)
    setErrors((prev) => ({ ...prev, project: '' }))
  }

  const handleImageChange = (e, idx) => {
    const file = e.target.files[0]
    if (!file) return

    if (file.size > 5 * 1024 * 1024) {
      alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 5 –ú–ë).')
      e.target.value = null // –°–±—Ä–æ—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
      return
    }

    const url = URL.createObjectURL(file)
    const newImgs = [...images]
    const newFiles = [...imageFiles]

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ URL, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (newImgs[idx]) URL.revokeObjectURL(newImgs[idx])

    newImgs[idx] = url
    newFiles[idx] = file
    setImages(newImgs)
    setImageFiles(newFiles)
  }

  const handleRemoveImage = (e, idx) => {
    e.stopPropagation() // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–ø–ª—ã—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑–≤–∞—Ç—å file input

    const newImgs = [...images]
    const newFiles = [...imageFiles]

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
    if (newImgs[idx]) URL.revokeObjectURL(newImgs[idx])

    newImgs[idx] = null
    newFiles[idx] = null
    setImages(newImgs)
    setImageFiles(newFiles)

    // –°–±—Ä–æ—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ input, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞
    if (fileInputRefs.current[idx]) {
      fileInputRefs.current[idx].value = null
    }
  }

  // --- –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –û–¢–ü–†–ê–í–ö–ê ---

  const validate = () => {
    const err = {}
    if (!form.name.trim()) err.name = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è'
    if (!form.email.trim()) err.email = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email'
    else if (!/^\S+@\S+\.\S+$/.test(form.email))
      err.email = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Email'
    if (!project) err.project = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞'
    if (!captchaChecked) err.captcha = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç'
    return err
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setSuccess('')

    const err = validate()
    setErrors(err)
    if (Object.keys(err).length) {
      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—é —Å –æ—à–∏–±–∫–æ–π
      const firstErrorKey = Object.keys(err)[0]
      const errorElement = document.querySelector(`[name="${firstErrorKey}"]`)
      if (errorElement)
        errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' })
      return
    }

    setSubmitting(true)

    // --- –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò –î–ê–ù–ù–´–• ---

    const formData = new FormData()
    formData.append('name', form.name)
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è ...

    imageFiles.forEach((file, index) => {
      if (file) {
        formData.append(`reference_${index}`, file)
      }
    })

    // –ò–ú–ò–¢–ê–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò
    try {
      await new Promise((res) => setTimeout(res, 1500))

      // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
      setForm({
        name: '',
        email: '',
        phone: '',
        company: '',
        site: '',
        idea: '',
        videoLink: '',
      })
      setProject('')
      setCaptchaChecked(false)
      images.forEach((url) => url && URL.revokeObjectURL(url))
      setImages([null, null, null])
      setImageFiles([null, null, null])
      setSuccess(
        '–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!'
      )
      setErrors({})
      setActiveStep(1)
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err)
      setErrors({ submit: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' })
    } finally {
      setSubmitting(false)
    }
  }

  // --- JSX ---

  const canSubmit =
    form.name.trim() &&
    form.email.trim() &&
    project &&
    captchaChecked &&
    !submitting

  return (
    <section className="kontakty-section" id="kontakty">
      <h1 className="kontakty-header">–û–±—Å—É–¥–∏–º –∏–¥–µ—é?</h1>

      <div className="kontakty-inner">
        {/* ==================================
            –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê (–¢–ê–ô–ú–õ–ê–ô–ù)
            ================================== */}
        <aside className="kontakty-timeline">
          <div className="logo-left">re.play</div>

          <div className="timeline-list">
            <div className={`timeline-item ${activeStep >= 1 ? 'active' : ''}`}>
              <div className="step-number">1</div>
              <div className="step-label">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
            </div>
            {/* –õ–∏–Ω–∏—è –º–µ–∂–¥—É 1 –∏ 2 */}
            <div className="vertical-line" />

            <div className={`timeline-item ${activeStep >= 2 ? 'active' : ''}`}>
              <div className="step-number">2</div>
              <div className="step-label">–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞</div>
            </div>
            {/* –õ–∏–Ω–∏—è –º–µ–∂–¥—É 2 –∏ 3 */}
            <div className="vertical-line" />

            <div className={`timeline-item ${activeStep >= 3 ? 'active' : ''}`}>
              <div className="step-number">3</div>
              <div className="step-label">–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏/–ó–∞–¥–∞—á–∏</div>
            </div>
            {/* –õ–∏–Ω–∏—è –º–µ–∂–¥—É 3 –∏ 4 */}
            <div className="vertical-line" />

            <div className={`timeline-item ${activeStep >= 4 ? 'active' : ''}`}>
              <div className="step-number">4</div>
              <div className="step-label">–†–µ—Ñ–µ—Ä–µ–Ω—Å—ã</div>
            </div>
          </div>
        </aside>

        {/* ==================================
            –ü–†–ê–í–ê–Ø –ö–û–õ–û–ù–ö–ê (–§–û–†–ú–ê)
            ================================== */}
        <main className="kontakty-form-wrap">
          <form className="kontakty-form" onSubmit={handleSubmit} noValidate>
            {/* 1. –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø */}
            <h2 className="kontakty-title">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>

            <div className="row two">
              <div className="field">
                <label className="field-label">–ò–º—è*</label>
                <input
                  name="name"
                  value={form.name}
                  onChange={handleChange}
                  placeholder="–ù–∞—Ç–∞–ª—å—è –¢–∏–º–æ—Ñ–µ–µ–≤–∞"
                  className={errors.name ? 'input error' : 'input'}
                  autoComplete="name"
                />
                {errors.name && (
                  <div className="field-error">{errors.name}</div>
                )}
              </div>

              <div className="field">
                <label className="field-label">Email*</label>
                <input
                  name="email"
                  value={form.email}
                  onChange={handleChange}
                  placeholder="–í–∞—à email"
                  className={errors.email ? 'input error' : 'input'}
                  autoComplete="email"
                />
                {errors.email && (
                  <div className="field-error">{errors.email}</div>
                )}
              </div>
            </div>

            <div className="row two">
              <div className="field">
                <label className="field-label">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input
                  name="phone"
                  value={form.phone}
                  onChange={handleChange}
                  placeholder="(925) 000-0000"
                  className="input"
                  autoComplete="tel"
                />
              </div>

              <div className="field">
                <label className="field-label">–ö–æ–º–ø–∞–Ω–∏—è</label>
                <input
                  name="company"
                  value={form.company}
                  onChange={handleChange}
                  placeholder="Exp. Company"
                  className="input"
                  autoComplete="organization"
                />
              </div>
            </div>

            <div className="row">
              <div className="field">
                <label className="field-label">–°–∞–π—Ç/–°–æ—Ü—Å–µ—Ç–∏</label>
                <input
                  name="site"
                  value={form.site}
                  onChange={handleChange}
                  placeholder="www.drugoi.de"
                  className="input"
                  autoComplete="url"
                />
              </div>
            </div>

            {/* 2. –¢–ò–ü –ü–†–û–ï–ö–¢–ê */}
            <h2 className="kontakty-title">–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞</h2>

            <div className="custom-select-wrapper" ref={projectRef}>
              <div
                className={`select-head ${errors.project ? 'error' : ''}`}
                onClick={() => setProjectOpen(!projectOpen)}
              >
                <span className={!project ? 'placeholder' : ''}>
                  {project || '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞'}
                </span>
                <span className="select-arrow">&#9660;</span>
              </div>
              {errors.project && (
                <div className="field-error">{errors.project}</div>
              )}

              {projectOpen && (
                <div className="select-list">
                  {PROJECT_OPTIONS.map((opt) => (
                    <div
                      key={opt}
                      className={`select-option ${
                        project === opt ? 'active' : ''
                      }`}
                      onClick={(e) => {
                        e.stopPropagation()
                        handleProjectSelect(opt)
                      }}
                    >
                      {opt}
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* 3. –û–ü–ò–°–ê–ù–ò–ï –ò–î–ï–ò/–ó–ê–î–ê–ß–ò */}
            <h2 className="kontakty-title" style={{ marginTop: '40px' }}>
              –û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏/–∑–∞–¥–∞—á–∏
            </h2>

            <div className="field">
              <textarea
                name="idea"
                placeholder="–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é"
                value={form.idea}
                onChange={handleChange}
                maxLength={MAX_IDEA_CHARS}
                className="textarea"
              />
              <span className="textarea-counter">
                {form.idea.length}/{MAX_IDEA_CHARS}
              </span>
            </div>

            {/* 4. –í–ê–®–ò –†–ï–§–ï–†–ï–ù–°–´ */}
            <h2 className="kontakty-title" style={{ marginTop: '40px' }}>
              –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã
            </h2>
            <p className="references-instruction">–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã</p>

            <div className="section-references">
              <div className="video-link-container">
                <p className="video-link-label">–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ</p>
                <input
                  name="videoLink"
                  value={form.videoLink}
                  onChange={handleChange}
                  className="input"
                  type="text"
                  placeholder="–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ"
                  style={{ height: '40px' }}
                />
              </div>

              <div className="uploads-block">
                {images.map((url, index) => (
                  <div key={index} className="upload-wrapper">
                    <div
                      className={`upload-box ${url ? 'has-image' : ''}`}
                      onClick={() =>
                        !url && fileInputRefs.current[index]?.click()
                      }
                    >
                      {url ? (
                        <img
                          src={url}
                          alt={`Reference ${index + 1}`}
                          className="preview-img"
                        />
                      ) : (
                        <div className="plus-icon">
                          <PlusIcon />
                        </div>
                      )}

                      <div
                        className="clip-icon-wrapper"
                        onClick={(e) =>
                          url
                            ? handleRemoveImage(e, index)
                            : fileInputRefs.current[index]?.click()
                        }
                        title={url ? '–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å' : '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å'}
                      >
                        <ClipIcon />
                      </div>

                      {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
                      <input
                        type="file"
                        accept="image/*"
                        ref={(el) => (fileInputRefs.current[index] = el)}
                        className="hidden-file"
                        onChange={(e) => handleImageChange(e, index)}
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* CAPTCHA –ò –ö–ù–û–ü–ö–ê –û–¢–ü–†–ê–í–ö–ò */}
            <div className="bottom-row">
              <div className="captcha-box">
                {/* –ß–µ–∫–±–æ–∫—Å "–Ø –Ω–µ —Ä–æ–±–æ—Ç" */}
                <div
                  className={`captcha-inner ${errors.captcha ? 'error' : ''}`}
                >
                  <input
                    type="checkbox"
                    id="robot-check"
                    name="robot-check"
                    checked={captchaChecked}
                    onChange={() => {
                      setCaptchaChecked(!captchaChecked)
                      setErrors((prev) => ({ ...prev, captcha: '' }))
                    }}
                  />
                  <label className="captcha-text" htmlFor="robot-check">
                    –Ø –Ω–µ —Ä–æ–±–æ—Ç
                  </label>
                </div>

                {/* Placeholder –¥–ª—è reCAPTCHA */}
                <div className="recaptcha-placeholder">
                  <ShieldIcon /> {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É —ç–º–æ–¥–∑–∏ */}
                  <div className="recap-logo-text">reCAPTCHA</div>
                  <small>Privacy - Terms</small>
                </div>
                {errors.captcha && (
                  <div className="field-error">{errors.captcha}</div>
                )}
              </div>

              <div className="submit-box">
                <button
                  type="submit"
                  className="btn-submit"
                  disabled={!canSubmit}
                >
                  {submitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                </button>
                {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ .submit-box –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
                {success && (
                  <div className="form-message success">{success}</div>
                )}
                {errors.submit && (
                  <div className="form-message error">{errors.submit}</div>
                )}
              </div>
            </div>

            <p className="agreement-text">
              –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤—ã –¥–∞–µ—Ç–µ{'\u00a0'}
              <a href="#" className="link">
                —Å–æ–≥–ª–∞—Å–∏–µ{'\u00a0'}
              </a>
              –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
              –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
            </p>
          </form>
        </main>
      </div>
    </section>
  )
}
